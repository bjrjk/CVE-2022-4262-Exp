var global = 0;

//==================================================================================
// - slot #0 LoadGlobalNotInsideTypeof MONOMORPHIC
//   [weak] 0x007a0019af19 <PropertyCell name=0x007a000061e5 <String[6]: #global> value=0> {
//     [0]: [weak] 0x007a0019af19 <PropertyCell name=0x007a000061e5 <String[6]: #global> value=0>
//     [1]: 0x007a000073bd <Symbol: (uninitialized_symbol)>
//  }
function LdaGlobal() {
    return global;
}

%EnsureFeedbackVectorForFunction(LdaGlobal);
LdaGlobal();
%DebugPrint(LdaGlobal);

//==================================================================================
// - slot #0 LoadGlobalInsideTypeof MONOMORPHIC
//   [weak] 0x007a0019af19 <PropertyCell name=0x007a000061e5 <String[6]: #global> value=0> {
//     [0]: [weak] 0x007a0019af19 <PropertyCell name=0x007a000061e5 <String[6]: #global> value=0>
//     [1]: 0x007a000073bd <Symbol: (uninitialized_symbol)>
//  }
function LdaGlobalInsideTypeof() {
    return typeof(global);
}
%EnsureFeedbackVectorForFunction(LdaGlobalInsideTypeof);
LdaGlobalInsideTypeof();
%DebugPrint(LdaGlobalInsideTypeof);


//==================================================================================
// - slot #0 StoreGlobalSloppy MONOMORPHIC {
//     [0]: [weak] 0x027a00199611 <PropertyCell name=0x027a000061e5 <String[6]: #global> value=0x027a0004a319 <Object map = 0000027A00184525>>
//     [1]: 0x027a000073bd <Symbol: (uninitialized_symbol)>
//  }
function StaGlobal(val) {
    global = val;
}
%EnsureFeedbackVectorForFunction(StaGlobal);
StaGlobal({});
%DebugPrint(StaGlobal);



//==================================================================================
// - slot #0 LoadProperty MONOMORPHIC
//   [weak] 0x007a0019b8f1 <Map[16](HOLEY_ELEMENTS)>: LoadHandler(Smi)(kind = kField, is in object = 1, is double = 0, field index = 3) {
//     [0]: [weak] 0x007a0019b8f1 <Map[16](HOLEY_ELEMENTS)>
//     [1]: 1668
//  }

function GetNamedProperty(obj) {
    return obj.x;
}
%EnsureFeedbackVectorForFunction(GetNamedProperty);
GetNamedProperty({x: 1});
%DebugPrint(GetNamedProperty);
GetNamedProperty({x: 1, y: 2});
GetNamedProperty({x: 1, y: 2, z: 3});
%DebugPrint(GetNamedProperty);


//==================================================================================
// - slot #0 LoadProperty MONOMORPHIC
//   [weak] 0x02270019a179 <Map[12](HOLEY_ELEMENTS)>: LoadHandler(<unexpected>)(0x022700199efd <AccessorPair>) {
//     [0]: [weak] 0x02270019a179 <Map[12](HOLEY_ELEMENTS)>
//     [1]: [weak] 0x022700199efd <AccessorPair>
//  }

class A {
    get prop() {
        return this.a;
    }
}

class B extends A {
    constructor() {
        super();
        this.a = 'B';
    }
    GetNamedPropertyFromSuper() {
        return super.prop;
    }
}

var b = new B();
%EnsureFeedbackVectorForFunction(b.GetNamedPropertyFromSuper);
b.GetNamedPropertyFromSuper();
%DebugPrint(b.GetNamedPropertyFromSuper);


//==================================================================================
// - slot #0 LoadKeyed MONOMORPHIC
//   0x03df000041ed <String[1]: #x>: LoadHandler(<unexpected>)(0x03df0004b28d <Other heap object (WEAK_FIXED_ARRAY_TYPE)>)
// {
//     [0]: 0x03df000041ed <String[1]: #x>
//     [1]: 0x03df0004b28d <Other heap object (WEAK_FIXED_ARRAY_TYPE)>
//  }
  
function GetKeyedProperty(obj, prop) {
    return obj[prop];
}
%EnsureFeedbackVectorForFunction(GetKeyedProperty);
GetKeyedProperty({x: 0x1337}, "x");
%DebugPrint(GetKeyedProperty);

//==================================================================================
// - slot #0 SetNamedSloppy MONOMORPHIC
//   [weak] 0x039000184525 <Map[28](HOLEY_ELEMENTS)>: StoreHandler(<unexpected>)(0x03900019a59d <Map[28](HOLEY_ELEMENTS)>)
// {
//     [0]: [weak] 0x039000184525 <Map[28](HOLEY_ELEMENTS)>
//     [1]: [weak] 0x03900019a59d <Map[28](HOLEY_ELEMENTS)>
//  }
  
function SetNamedProperty(obj) {
    obj.prop = 1;
}
%EnsureFeedbackVectorForFunction(SetNamedProperty);
SetNamedProperty({});
%DebugPrint(SetNamedProperty);


//==================================================================================
// - slot #0 SetNamedStrict MONOMORPHIC
//   [weak] 0x007a0019c1c5 <Map[32](HOLEY_ELEMENTS)>: StoreHandler(Smi)(kind = kSlow, keyed access store mode = STANDARD_STORE)
// {
//     [0]: [weak] 0x007a0019c1c5 <Map[32](HOLEY_ELEMENTS)>
//     [1]: 10
//  }

function DefineNamedOwnProperty() {
    class Clazz { "name" = 1 };
}
%EnsureFeedbackVectorForFunction(DefineNamedOwnProperty);
DefineNamedOwnProperty({});
%DebugPrint(DefineNamedOwnProperty);




//==================================================================================
// - slot #0 StoreKeyedSloppy MONOMORPHIC
//   0x021f000041ed <String[1]: #x>: StoreHandler(<unexpected>)(0x021f0004babd <Other heap object (WEAK_FIXED_ARRAY_TYPE)>) {
//     [0]: 0x021f000041ed <String[1]: #x>
//     [1]: 0x021f0004babd <Other heap object (WEAK_FIXED_ARRAY_TYPE)>
//  }

function SetKeyedProperty(obj, prop, val) {
    obj[prop] = val;
}
%EnsureFeedbackVectorForFunction(SetKeyedProperty);
SetKeyedProperty({}, "x", 0x1337);
%DebugPrint(SetKeyedProperty);


//==================================================================================
// - slot #0 SetNamedStrict MONOMORPHIC
//   [weak] 0x007a0019c5a9 <Map[32](HOLEY_ELEMENTS)>: StoreHandler(Smi)(kind = kSlow, keyed access store mode = STANDARD_STORE)
// {
//     [0]: [weak] 0x007a0019c5a9 <Map[32](HOLEY_ELEMENTS)>
//     [1]: 10
//  }
function DefineKeyedOwnProperty() {
    class Clazz { ["name"] = 1 };
}
%EnsureFeedbackVectorForFunction(DefineKeyedOwnProperty);
DefineKeyedOwnProperty({});
%DebugPrint(DefineKeyedOwnProperty);


//==================================================================================
//- slot #0 Literal  {
//    [0]: 0x02330019b135 <AllocationSite>
// }
//- slot #1 StoreInArrayLiteral MONOMORPHIC {
//    [1]: [weak] 0x02330018dcc1 <Map[16](PACKED_SMI_ELEMENTS)>
//    [2]: 0x023300147bf1 <CodeDataContainer BUILTIN StoreFastElementIC_Standard>
// }
function StaInArrayLiteral(x) {
    return [x];
}
%EnsureFeedbackVectorForFunction(StaInArrayLiteral);
StaInArrayLiteral(1);
%DebugPrint(StaInArrayLiteral);

//==================================================================================
// - slot #0 Literal  {
//     [0]: 1
//  }
// - slot #1 DefineKeyedOwnPropertyInLiteral MONOMORPHIC {
//     [1]: [weak] 0x039200184525 <Map[28](HOLEY_ELEMENTS)>
//     [2]: 0x039200006781 <String[4]: #name>
//  }


function DefineKeyedOwnPropertyInLiteral() {
    return { ["name"] : 1 };
}
%EnsureFeedbackVectorForFunction(DefineKeyedOwnPropertyInLiteral);
DefineKeyedOwnPropertyInLiteral();
%DebugPrint(DefineKeyedOwnPropertyInLiteral);

//==================================================================================
// - slot #0 LoadGlobalNotInsideTypeof MONOMORPHIC
//   [weak] 0x017e0019a24d <PropertyCell name=0x017e00199569 <String[6]: #func_A> value=0x017e0019a22d <JSFunction func_A
//(sfi = 0000017E0019993D)>> {
//     [0]: [weak] 0x017e0019a24d <PropertyCell name=0x017e00199569 <String[6]: #func_A> value=0x017e0019a22d <JSFunction
//func_A (sfi = 0000017E0019993D)>>
//     [1]: 0x017e000073bd <Symbol: (uninitialized_symbol)>
//  }
// - slot #2 Call  {
//     [2]: [weak] 0x017e0019a22d <JSFunction func_A (sfi = 0000017E0019993D)>
//     [3]: 4
//  }

function func_A(x) {
    return x;
}

function Call(x) {
    func_A(x);
}
%EnsureFeedbackVectorForFunction(Call);
Call({});
%DebugPrint(Call);

//==================================================================================
// - slot #0 LoadGlobalNotInsideTypeof MONOMORPHIC
//   [weak] 0x02170019a3d5 <PropertyCell name=0x02170019958d <String[3]: #sum> value=0x02170019a3b5 <JSFunction sum (sfi =
// 00000217001999F9)>> {
//     [0]: [weak] 0x02170019a3d5 <PropertyCell name=0x02170019958d <String[3]: #sum> value=0x02170019a3b5 <JSFunction sum
// (sfi = 00000217001999F9)>>
//     [1]: 0x0217000073bd <Symbol: (uninitialized_symbol)>
//  }
// - slot #2 Call  {
//     [2]: [weak] 0x02170019a3b5 <JSFunction sum (sfi = 00000217001999F9)>
//     [3]: 4
//  }


function sum(x, y, z) {
    return x + y + z;
}

function CallWithSpread(arr) {
    return sum(...arr);
}
%EnsureFeedbackVectorForFunction(CallWithSpread);
CallWithSpread([1,2,3]);
%DebugPrint(CallWithSpread);


//==================================================================================
// - slot #0 Call  {
//     [0]: [weak] 0x013b0004cb95 <JSFunction Clazz2 (sfi = 0000013B00199BC1)>
//     [1]: 4
//  }

class Clazz2 {
    
};
function Construct() {
    return new Clazz2(1,2,3);
}

%EnsureFeedbackVectorForFunction(Construct);
Construct();
%DebugPrint(Construct);

//==================================================================================
// - slot #0 CompareOp CompareOp:SignedSmall {
//     [0]: 1
//  }

function TestEqual(x) {
    return x == 1;
}
%EnsureFeedbackVectorForFunction(TestEqual);
TestEqual(1);
%DebugPrint(TestEqual);


//==================================================================================
// - slot #0 CompareOp CompareOp:SignedSmall {
//     [0]: 1
//  }

function TestEqualStrict(x) {
    return x === 1;
}
%EnsureFeedbackVectorForFunction(TestEqualStrict);
TestEqualStrict(1);
%DebugPrint(TestEqualStrict);



//==================================================================================
// - slot #0 CompareOp CompareOp:SignedSmall {
//     [0]: 1
//  }
function TestLessThan(x) {
    return x < 1;
}
%EnsureFeedbackVectorForFunction(TestLessThan);
TestLessThan(1);
%DebugPrint(TestLessThan);



//==================================================================================
// - slot #0 CompareOp CompareOp:SignedSmall {
//     [0]: 1
//  }

function TestGreaterThan(x) {
    return x > 1;
}
%EnsureFeedbackVectorForFunction(TestGreaterThan);
TestGreaterThan(1);
%DebugPrint(TestGreaterThan);

//==================================================================================
// - slot #0 CompareOp CompareOp:SignedSmall {
//     [0]: 1
//  }

function TestLessThanOrEqual(x) {
    return x <= 1;
}
%EnsureFeedbackVectorForFunction(TestLessThanOrEqual);
TestLessThanOrEqual(1);
%DebugPrint(TestLessThanOrEqual);

//==================================================================================
// - slot #0 CompareOp CompareOp:SignedSmall {
//     [0]: 1
//  }

function TestGreaterThanOrEqual(x) {
    return x >= 1;
}
%EnsureFeedbackVectorForFunction(TestGreaterThanOrEqual);
TestGreaterThanOrEqual(1);
%DebugPrint(TestGreaterThanOrEqual);


//==================================================================================
// - slot #0 HasKeyed MONOMORPHIC {
//     [0]: 0x02c80000407d <String[1]: #a>
//     [1]: 0x02c80004d5d9 <Other heap object (WEAK_FIXED_ARRAY_TYPE)>
//  }


function TestIn(obj, prop) {
    return prop in obj;
}

%EnsureFeedbackVectorForFunction(TestIn);
TestIn({a:1}, "a");
%DebugPrint(TestIn);

//==================================================================================
// - slot #0 InstanceOf MONOMORPHIC {
//     [0]: [weak] 0x01940004d7bd <JSFunction Clazz3 (sfi = 0000019400199F0D)>
//  }
class Clazz3 { }
class Clazz4 extends Function {}

var bar = function lol() {
};

function TestInstanceOf(obj) {
    //return obj instanceof Clazz3;
    return obj instanceof bar;
}

%EnsureFeedbackVectorForFunction(TestInstanceOf);
TestInstanceOf(new Clazz3());
%DebugPrint(TestInstanceOf);


//==================================================================================
// - slot #0 Literal  {
//     [0]: 1
//  }
function CreateRegExpLiteral() {
    return /abc/;
}
%EnsureFeedbackVectorForFunction(CreateRegExpLiteral);
CreateRegExpLiteral();
%DebugPrint(CreateRegExpLiteral);


//==================================================================================
// - slot #0 Literal  {
//     [0]: 0x02bf0019ca89 <AllocationSite>
//  }

function CreateArrayLiteral() {
    return [1,2,3];
}
%EnsureFeedbackVectorForFunction(CreateArrayLiteral);
CreateArrayLiteral();
%DebugPrint(CreateArrayLiteral);

//==================================================================================
// - slot #0 Literal  {
//     [0]: 0x02420019cca1 <AllocationSite>
//  }


function CreateEmptyArrayLiteral() {
    return [];
}
%EnsureFeedbackVectorForFunction(CreateEmptyArrayLiteral);
CreateEmptyArrayLiteral();
%DebugPrint(CreateEmptyArrayLiteral);

//==================================================================================
// - slot #0 Literal  {
//     [0]: 1
//  }
function CreateObjectLiteral() {
    return {a:1};
}
%EnsureFeedbackVectorForFunction(CreateObjectLiteral);
CreateObjectLiteral();
%DebugPrint(CreateObjectLiteral);


//==================================================================================
// - slot #0 CloneObject MONOMORPHIC {
//     [0]: [weak] 0x031d0019cff5 <Map[24](HOLEY_ELEMENTS)>
//     [1]: 0x031d0019d01d <Map[24](HOLEY_ELEMENTS)>
//  }
function CloneObject(obj) {
    return {...obj};
}
%EnsureFeedbackVectorForFunction(CloneObject);
CloneObject({a:1, b:2, c:3});
%DebugPrint(CloneObject);




//==================================================================================
// - slot #0 ForIn ForIn:EnumCacheKeysAndIndices {
//     [0]: 1
//  }
// - slot #1 JumpLoop JumpLoop {
//     [1]: [cleared]
//  }
function ForIn(obj) {
    for(let prop in obj) {
    }
}
%EnsureFeedbackVectorForFunction(ForIn);
ForIn({a:1, b:2, c:3});
%DebugPrint(ForIn);

//==================================================================================
// - slot #2 Call  {
//     [2]: [weak] 0x01f100190ac9 <JSFunction [Symbol.iterator] (sfi = 000001F10015D479)>
//     [3]: 4
//  }
function* make_iterator() {
    yield 1;
    yield 2;
}
function GetIterator(it) {
    for(let prop of it) {
    }
}
var it = make_iterator();
%EnsureFeedbackVectorForFunction(GetIterator);
GetIterator(it);
%DebugPrint(GetIterator);



//==================================================================================
// - slot #2 Literal  {
//     [2]: 0x02d80019d9dd <JSArray[2]>
//  }

function my_tag(strings, expr) {
    
}

function GetTemplateObject(expr) {
    return my_tag`part1 ${expr} part2`; //unknowne
}
%EnsureFeedbackVectorForFunction(GetTemplateObject);
GetTemplateObject("woo");
%DebugPrint(GetTemplateObject);